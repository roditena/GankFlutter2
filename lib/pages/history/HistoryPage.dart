import 'dart:convert';import 'package:GankFlutter/api/Api.dart';import 'package:GankFlutter/api/http.dart';import 'package:GankFlutter/common/GlobalConfig.dart';import 'package:GankFlutter/model/DailyResponse.dart';import 'package:GankFlutter/model/EventList.dart';import 'package:GankFlutter/utils/DialogUtils.dart';import 'package:GankFlutter/utils/SharedPrfUtils.dart';import 'package:GankFlutter/widget/CalendarCarousel.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:GankFlutter/common/Constant.dart';class HistoryPage extends StatefulWidget {  @override  State<StatefulWidget> createState() => new _HistoryPageState();}class _HistoryPageState extends State<HistoryPage>    with HttpExt, TickerProviderStateMixin {  EventList _markedDateMap = new EventList();  CurvedAnimation curved; //曲线动画，动画插值，  AnimationController controller; //动画控制器  /// 标志当前在请求中。  var _isRequesting = true;  var _requestError = false;  @override  void initState() {    super.initState();    controller = new AnimationController(        vsync: this, duration: const Duration(seconds: 1));    curved = new CurvedAnimation(        parent: controller, curve: Curves.bounceOut); //模仿小球自由落体运动轨迹    loadingData();  }  @override  Widget build(BuildContext context) {    CalendarCarousel _calendarCarousel = CalendarCarousel(      weekendTextStyle: TextStyle(        color: GlobalConfig.colorPrimary,      ),      thisMonthDayBorderColor: Colors.grey,      weekFormat: false,      markedDatesMap: _markedDateMap,      todayBorderColor: GlobalConfig.colorPrimary,      todayButtonColor: GlobalConfig.colorPrimary,      iconColor: GlobalConfig.colorPrimary,      height: 430.0,      customGridViewPhysics: NeverScrollableScrollPhysics(),      markedDateShowIcon: true,      markedDateIconMaxShown: 2,      markedDateMoreShowTotal:          true, // null for not showing hidden events indicator    );    return new Scaffold(        appBar: new AppBar(          title: new Text('历史车轮'),          actions: <Widget>[            new RotationTransition(              turns: curved,              child: new IconButton(                  icon: new Icon(Icons.autorenew),                  onPressed: () {                    controller.forward(); //向前播放动画                    ///这里添加刷新功能                    DialogUtils.show(context, "更新中…");                    requestHistoryData();                  }),            )          ],        ),        body: _isRequesting            ? _requestError                ? buildExceptionIndicator("服务器异常，修复中…")                : Center(                    child: CircularProgressIndicator(                      valueColor:                          AlwaysStoppedAnimation(GlobalConfig.colorPrimary),                    ),                  )            : SingleChildScrollView(                child: Column(                  crossAxisAlignment: CrossAxisAlignment.start,                  mainAxisAlignment: MainAxisAlignment.start,                  children: <Widget>[                    //custom icon                    Container(                      margin: EdgeInsets.symmetric(horizontal: 16.0),                      child: _calendarCarousel,                    ),                  ],                ),              ));  }  ///请求历史日期  void loadingData() async {    ///先从缓存中获取日历数据    var cacheData = await SharedPrfUtils.get(Api.HISTORY_URL);    if (cacheData != null) {      var userMap = json.decode(cacheData);      CategoryResponse categoryResponse = CategoryResponse.fromJson(userMap);      print("日历获取缓存数据成功");      setState(() {        _isRequesting = false;        _requestError = false;        timeDataFormat(categoryResponse.results);      });    } else {      requestHistoryData();    }  }  void requestHistoryData() {    getGankfromNet(Api.HISTORY_URL).then((CategoryResponse categoryResponse) {      if (!categoryResponse.error) {        var _listData = categoryResponse.results;        print("=================================");        print(_listData);        if (_listData.length > 0) {          setState(() {            _isRequesting = false;            _requestError = false;            timeDataFormat(_listData);            SharedPrfUtils.saveString(                Api.HISTORY_URL, json.encode(categoryResponse.toJson()));          });        }      }      DialogUtils.hidden();      controller.reverse(); //向后播放动画    }).catchError((error) {      setState(() {        _requestError = true;      });      DialogUtils.hidden();    });  }  void timeDataFormat(var listData) {    _markedDateMap.clear();    for (var item in listData) {      List<String> sp = item.split("-");      _markedDateMap.add(          new DateTime(int.parse(sp[0]), int.parse(sp[1]), int.parse(sp[2])),          new DateTime(int.parse(sp[0]), int.parse(sp[1]), int.parse(sp[2])));    }  }}